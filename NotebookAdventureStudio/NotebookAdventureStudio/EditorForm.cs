using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using NotebookAdventureStudio.Controls;
using NotebookAdventureStudio.Data;

namespace NotebookAdventureStudio
{
    public partial class EditorForm : Form
    {
        public static Color TransparentColor = Color.FromArgb(0xFC, 0x00, 0xFC);
        public static Color FreeBlockColor = Color.FromArgb(0, 255, 0);
        public static Color WallBlockColor = Color.FromArgb(255, 0, 0);
        public static Color StairsBlockColor = Color.FromArgb(0, 0, 255);
        public static Color[] Colors = new Color[] { FreeBlockColor, WallBlockColor, StairsBlockColor };

        Bitmap levelImage;
        Bitmap levelBlocksImage;
        Bitmap renderedImage = new Bitmap(600, 840);        

        byte[,] levelBlocks;

        Entity Cat;
        Entity Player;
        List<Entity> LvlSpikes = new List<Entity>();

        void SetPlayerCoords(int x,int y)
        {

        }

        void SetCatCoords(int x, int y)
        {

        }

        public EditorForm(string gfx_path, string dat_path)
        {
            InitializeComponent();
            Player = new Entity(Workspace, new Player(), 100, 100, 32, 32, 128, 255);
            Cat = new Entity(Workspace, new Cat(), 150, 150, 16, 16, 128, 255);
            loadImage(gfx_path);
            loadData(dat_path);
            GfxPicture.Image = renderedImage;
            GfxPicture.SendToBack();
        }

        private int _ZoomFactor = 1;
        public int ZoomFactor
        {
            get => _ZoomFactor;
            set
            {
                _ZoomFactor = value;
                GfxPicture.Width = 600 * _ZoomFactor;
                GfxPicture.Height = 840 * _ZoomFactor;

                foreach (Control control in GfxPicture.Controls) 
                {
                    if (control.Tag != null && control.Tag is Entity) 
                    {
                        var e = control.Tag as Entity;
                        e.ZoomControl(_ZoomFactor);
                    }
                }
            }
        }

        void loadImage(string path)
        {
            levelImage = new Bitmap(600, 840);
            var bmp = new Bitmap(path);
            if(bmp.Width==601 && bmp.Height==841)
            {
                if (MessageBox.Show("This file was probably generated by Tiled and its dimensions are 1px off. " +
                    "Do you want to fix the image automatically?", 
                    "Error", MessageBoxButtons.YesNo) != DialogResult.Yes) 
                {
                    Close();
                    return;
                }                
                using(var g=Graphics.FromImage(levelImage))
                {
                    g.Clear(bmp.GetPixel(0,0)); // transparent pixel
                    g.DrawImageUnscaled(bmp, 0, -1);
                }
                levelImage.Save(path);
            }
            else if(bmp.Width==600 && bmp.Height==840)
            {
                using (var g = Graphics.FromImage(levelImage))
                {
                    g.DrawImageUnscaled(bmp, 0, 0);
                }
            }
            else
            {
                MessageBox.Show("Wrong image format");
                Close();
            }
            levelImage.MakeTransparent(TransparentColor);            
        }

        void loadData(string path)
        {
            levelBlocksImage = new Bitmap(600, 840);
            levelBlocks = new byte[105, 75];
            if(path!="/")
            {
                using(BinaryReader br=new BinaryReader(File.OpenRead(path)))
                {
                    Buffer.BlockCopy(br.ReadBytes(levelBlocks.Length), 0, levelBlocks, 0, levelBlocks.Length);

                    byte[] nm = br.ReadBytes(16);
                    LevelNameBox.Text = System.Text.Encoding.UTF8.GetString(nm);
                    short x = br.ReadInt16();
                    short y = br.ReadInt16();
                    Player.updatePos(x, y, ZoomFactor);
                    PlayerPosLabel.Text = $"{Player.X}, {Player.Y}";
                    x = br.ReadInt16();
                    y = br.ReadInt16();
                    Cat.updatePos(x, y, ZoomFactor);
                    CatPosLabel.Text = $"{Cat.X}, {Cat.Y}";

                    int spkcnt = br.ReadByte();
                    for (int i = 0; i < spkcnt; i++)
                    {
                        int sx = br.ReadByte();
                        int sy = br.ReadByte();
                        int sl = br.ReadByte();

                        var spikes = new Entity(Workspace, new Spikes(), sx * 8, (sy+1) * 8, 8 * sl, 8, 0, 128);
                        spikes.ZoomControl(ZoomFactor);
                        LvlSpikes.Add(spikes);
                    }
                }
            }
            else
            {

            }
            updateLevelBlocksImage();            
        }

        void updateLevelBlocksImage()
        {

            using (var g = Graphics.FromImage(levelBlocksImage))
            {
                g.Clear(Color.Transparent);
                for (int y = 0; y < 105; y++)
                {
                    for (int x = 0; x < 75; x++) 
                    {
                        byte clid = levelBlocks[y, x];
                        var brush = new SolidBrush(Color.FromArgb(100, Color.Yellow));
                        if (clid < 3)
                            brush = new SolidBrush(Color.FromArgb(100, Colors[clid]));
                        g.FillRectangle(brush, 8 * x, 8 * y, 8, 8);
                    }
                }
            }
            using(var g=Graphics.FromImage(renderedImage))
            {
                g.Clear(Color.Transparent);
                g.DrawImageUnscaled(levelImage, 0, 0);
                g.DrawImageUnscaled(levelBlocksImage, 0, 0);
            }
        }
        
        private void ZoomButton_CheckedChanged(object sender, EventArgs e)
        {
            var cb = sender as RadioButton;
            if (cb != null)
            {
                if (cb.Checked)
                {
                    int factor = Convert.ToInt32(cb.Text.Substring(1));
                    ZoomFactor = factor;
                }
            }
            else
            {
                ZoomFactor = 1;
            }
            GfxPicture.Invalidate(true);
        }

        object tool = null;

        private void EditPlayerCoordLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            tool = EditPlayerCoordLabel;
            CurrentToolLabel.Text = "set Player position";
        }

        private void EditCatCoordLabel_LinkClicked(object sender, LinkLabelLinkClickedEventArgs e)
        {
            tool = EditCatCoordLabel;
            CurrentToolLabel.Text = "set Cat position";
        }

        private void GfxPicture_MouseDown(object sender, MouseEventArgs e)
        {
            if (tool == EditPlayerCoordLabel)
            {
                Player.updatePos(e.X / ZoomFactor, e.Y / ZoomFactor, ZoomFactor);
                PlayerPosLabel.Text = $"{Player.X}, {Player.Y}";                
            }
            else if(tool == EditCatCoordLabel)
            {
                Cat.updatePos(e.X / ZoomFactor, e.Y / ZoomFactor, ZoomFactor);
                CatPosLabel.Text = $"{Cat.X}, {Cat.Y}";                
            }
        }

        private void GfxPicture_Click(object sender, EventArgs e)
        {           
        }

        private void GfxPicture_MouseHover(object sender, EventArgs e)
        {

        }

        private void EditorForm_Load(object sender, EventArgs e)
        {            
        }

        private void spikesHereToolStripMenuItem_Click(object sender, EventArgs e)
        {
            var pt = GfxPicture.PointToClient(LevelCtxMenu.Bounds.Location);
            int x = pt.X / ZoomFactor;
            int y = pt.Y / ZoomFactor;
            var spikes = new Entity(Workspace, new Spikes(), x / 8 * 8, y / 8 * 8, 32, 8, 0, 128);
            spikes.ZoomControl(ZoomFactor);
            LvlSpikes.Add(spikes);
            GfxPicture.Invalidate(true);
        }
    }
}
